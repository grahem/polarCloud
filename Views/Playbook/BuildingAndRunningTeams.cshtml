@{
    ViewBag.Title = "Building and Running Teams";
}
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta content="" name="keywords">
        <meta content="" name="description">

        <!-- Favicons -->
        <link href="/img/logo.png" rel="icon">
        <link href="/img/logo.png" rel="apple-touch-icon">

        <!-- Google Fonts -->
        <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Montserrat:300,400,500,700"
            rel="stylesheet">

        <!-- Bootstrap CSS File -->
        <link href="/lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">

        <!-- Libraries CSS Files -->
        <link href="/lib/font-awesome/css/font-awesome.min.css" rel="stylesheet">
        <link href="/lib/animate/animate.min.css" rel="stylesheet">
        <link href="/lib/ionicons/css/ionicons.min.css" rel="stylesheet">
        <link href="/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
        <link href="/lib/lightbox/css/lightbox.min.css" rel="stylesheet">

        <!-- Main Stylesheet File -->
        <link href="/css/style.css" rel="stylesheet">

    </head>

    <body style="background: black; margin-bottom: 20px">
        <div style="margin-top: 120px">

            <p>The trajectory of building teams is obvious. It starts out with a few people who find other people to join the team. As the team grows and more disciplines are added, more teams crop up, all needing to report to the founders. The founders can only handle so many distractions, so It doesn't take long before executives, directors, and managers are needed. And since funding is likely for all this growth, investors and advisors. For many companies, this model may include entirely remote partners and staff.</p>

            <p>Here we focus on leadership principles and the day to day operations of many successful teams. Conway's law states that organizations design systems that mirror their own communication structure. To develop a clear and transparent solution is to communicate transparently and clearly as a team. While another one of our other playbooks is set on hiring employees, hiring is the first touchpoint in establishing a working relationship with the team. Though the school of communication is vast, a fundamental principle to healthy communication is trust. Teams seeking to earn and build trust through empowerment, servant leadership, and mentorship are effective. Good leadership is about seeing a path toward the vision and communicating that path. This includes earning trust across teams and throughout the org, which leads to building a professional network. It also includes weaving mentorship into the fabric of the organization as a way to open new paths.</p>

            <p>At the lower level, there are operational models used, like Scrum. Scrum is a way for teams to communicate clearly, transparently, and identify problems that could jeopardize an initiative. With Scrum, teams monitor and product tasks that are daily, weekly, and monthly in duration. A structured meeting called a standup is held frequently, as much as daily, to discuss accomplishments, currently active tasks, an expectation of task completion, along with setbacks and potential issues impeding product development. This development process is used to ensure products and features are completed and delivered on a predictable timetable.</p>

            <p>With scrums, development and release cycles have a fixed duration called sprints. A sprint can last a week, two, or more depending on the complexity and nature of the product. A sprint consists of tasks. A grouping of tasks is called a story. A grouping of stories is called an epic and represents a major piece of work. Any product or business initiative can consist of multiple epics. The goal of scrum is to complete epics. While scrum was created to help software developers, it has evolved to be used across disciplines and throughout the organization. </p>

            <p>Tasks are predictable units of work. They are relatively small and their size is determined with feedback from the team. Tasks can be sized by estimating the number of hours, days or weeks it should take to complete the task or by using relative sizing. Relative sizing compares a given task to all the other tasks in the sprint. In relative sizing, either a Fibonacci sequence or other sizing method is used. A Fibonacci sequence involves scoring a task as a 1, 2, 3, 5, 7, 18 or 21 (the first 7 numbers of the Fibonacci sequence). Here, a task with a score of 1 can be completed inside of a day whereas a 21 can not be finished in a sprint and should be broken down into smaller tasks. Using a custom method, a small, medium, large, extra-large is typically used to size tasks relative to the others in the sprint. A story, being a collection of tasks, may or may not fit into a single sprint, where epics often span multiple sprints. It's important to ensure the collection of tasks can fit easily into a sprint with time to spare as not to fall victim to the planning fallacy.</p>

            <p>As team members add tasks to the current sprint or to the backlog of tasks that are not assigned to a sprint, the member can include a sizing estimate, but the sizing is primarily determined by the team. During each scrum, it is useful the discuss any new tasks and agree on the sizing of the tasks. A burn rate can talk to the speed of the sprint and whether or not a task can fit into the current sprint, if it can go on-deck, or it should be in the backlog of tasks. </p>

            <p>Stories add a narrative to the grouping of tasks. The narrative is written from the perspective of the customer. A customer can be external to the company, or represent staff inside of the company, for example rolling out a training program to an internal division. In one sentence, the narrative should identify the customer, explain the customers' specific need and express what the customer is trying to accomplish. For this reason, stories can be used interchangeably with features. A well-written story will include preconditions, like dependency on another story's completion, and an explanation of how success will be measured.</p>

            <p>An effective way to run a scrum meeting is by having the scrum master, the facilitator of the meeting goes around the team having each team member give status on their tasks. This can be accompanied by a list of tasks the facilitator walks through while updating the tasks in real-time. In the case of a conversion getting off-topic, anyone on the team can use a stop-word, like "popcorn", to direct attention back to the important topics. It's important not to cast blame on team members for deficiencies, but rather see the status for what it is, a problem to solve collectively.</p>

            <p>One tool that can be used to visualize the health of a sprint is called a Kanban board. A Kanban board can be virtual or a physical board using a wall or a  whiteboard. While mostly effective for non-remote teams, it's a recommended project management tool for visualizing the progression of tasks. By divide surface into columns to represent milestone steps in the development process and to represent a task, place a sticky note, including the task's name and size on the surface in the column that best describes its status. The last column on the wall should be "Done." The definition of done will vary from team to team, but as an exercise in communication, agree with the team on a definition early on in the process.</p>

            <p>Epics paint a bigger picture of product development. If a product required setting up a multi-channel marketing campaign, locking down the logistics of manufacturing a product, or a major software feature.  Epics can be easily communicated across teams and might be rolled up into an initiate name, like "project blue light". Epics can also give a sense of release dates and how close to completion of the product as a whole is. Epics also serve as the starting point for new team members or merging teams.</p>

            <p>Modeling a development process like this has additional benefits to building strong communication. By design, it keeps teams accountable for each other and helps to build trust by teams solving problems together. Work is often being revised and refined, and the process elicits feedback from other on the team as well as outside influencers.</p>

            <p>Upon the completion of a sprint, it can be helpful for the team to conduct a retrospective exploring demos, feedback, internal conversations, and thoughts on how to improve the process. It serves as a good time to discuss relative sprint performance, upcoming schedules, and changes to the roadmap.</p>

            <p>Since this model empowers team members to work with outside influencers and resources directly, it can dissolve the need for a manager in some companies. At a minimum, it frees the manager to focus on monitoring the sprint, clearing current or upcoming obstacles, hiring the right people, selecting the best vendors, and communicating decisions across the organization.</p>

            <p>If this is all too heavy, you can always just use a calendar and TODO lists.</p>

            </div>

            <a href="#" class="back-to-top"><i class="fa fa-chevron-up"></i></a>
            
            <script src="/lib/jquery/jquery.min.js"></script>
            <script src="/lib/jquery/jquery-migrate.min.js"></script>
            <script src="/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
            <script src="/lib/easing/easing.min.js"></script>
            <script src="/lib/superfish/hoverIntent.js"></script>
            <script src="/lib/superfish/superfish.min.js"></script>
            <script src="/lib/wow/wow.min.js"></script>
            <script src="/lib/waypoints/waypoints.min.js"></script>
            <script src="/lib/counterup/counterup.min.js"></script>
            <script src="/lib/owlcarousel/owl.carousel.min.js"></script>
            <script src="/lib/isotope/isotope.pkgd.min.js"></script>
            <script src="/lib/lightbox/js/lightbox.min.js"></script>
            <script src="/lib/editor.js/code.ts"></script>
                    
            <script src="/js/main.js"></script>
            <script src="/js/site.js"></script>

            <script>
        </script>
    </body>
</html>



